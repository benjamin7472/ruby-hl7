require 'ruby-hl7'
require 'active_record'
require 'activerecord-sqlserver-adapter'



# TODO: remove the ActiveRecord connection from here and change the methods to point to classes without the numeric digit behind it (eg. - Hl7Nte2)
ActiveRecord::Base.establish_connection(
    :adapter => 'sqlserver',
    :host => 'localhost',
    :port => '1433',
    :database => 'somedb'
)

class Hl7Msh2 < ActiveRecord::Base
  self.table_name = 'HL7_MSH'
  alias_attribute :msh_1, :MSH_1
  alias_attribute :msh_2, :MSH_2
  alias_attribute :msh_3, :MSH_3
  alias_attribute :msh_4, :MSH_4
  alias_attribute :msh_5, :MSH_5
  alias_attribute :msh_6, :MSH_6
  alias_attribute :msh_7, :MSH_7
  alias_attribute :msh_8, :MSH_8
  alias_attribute :msh_9, :MSH_9
  alias_attribute :msh_10, :MSH_10
  alias_attribute :msh_11, :MSH_11
  alias_attribute :msh_9_id, :MSH_9_ID
end



class Hl7Nte2 < ActiveRecord::Base
  self.table_name = 'HL7_NTE_N'
  alias_attribute :pid18_patacct, :PID18_PATACCT
  alias_attribute :pid3_mrn, :PID3_MRN
  alias_attribute :pid2_DOB, :PID2_DOB
  alias_attribute :pid4_ssn, :PID4_SSN
  alias_attribute :nte_n_1, :NTE_N_1
  alias_attribute :nte_n_2, :NTE_N_2
  alias_attribute :nte_n_3, :NTE_N_3
  alias_attribute :nte_n_4, :NTE_N_4
  alias_attribute :nte_n_nbr_set, :NTE_N_NBR_SET
  alias_attribute :msh_9_id, :MSH_9_ID

end



class Hl7Obr2 < ActiveRecord::Base
  self.table_name = 'HL7_OBR_N'
  alias_attribute :pid18_patacct, :PID18_PATACCT
  alias_attribute :pid3_mrn, :PID3_MRN
  alias_attribute :pid2_DOB, :PID2_DOB
  alias_attribute :pid4_ssn, :PID4_SSN
  alias_attribute :obr_n_1, :OBR_N_1
  alias_attribute :obr_n_2, :OBR_N_2
  alias_attribute :obr_n_3, :OBR_N_3
  alias_attribute :obr_n_4, :OBR_N_4
  alias_attribute :obr_n_5, :OBR_N_5
  alias_attribute :obr_n_6, :OBR_N_6
  alias_attribute :obr_n_7, :OBR_N_7
  alias_attribute :obr_n_8, :OBR_N_8
  alias_attribute :obr_n_9, :OBR_N_9
  alias_attribute :obr_n_10, :OBR_N_10
  alias_attribute :obr_n_11, :OBR_N_11
  alias_attribute :obr_n_12, :OBR_N_12
  alias_attribute :obr_n_13, :OBR_N_13
  alias_attribute :obr_n_14, :OBR_N_14
  alias_attribute :obr_n_15, :OBR_N_15
  alias_attribute :obr_n_16, :OBR_N_16
  alias_attribute :obr_n_17, :OBR_N_17
  alias_attribute :obr_n_18, :OBR_N_18
  alias_attribute :obr_n_19, :OBR_N_19
  alias_attribute :obr_n_20, :OBR_N_20
  alias_attribute :obr_n_21, :OBR_N_21
  alias_attribute :obr_n_22, :OBR_N_22
  alias_attribute :obr_n_23, :OBR_N_23
  alias_attribute :obr_n_24, :OBR_N_24
  alias_attribute :obr_n_25, :OBR_N_25
  alias_attribute :obr_n_26, :OBR_N_26
  alias_attribute :obr_n_nbr_set, :OBR_N_NBR_SET
  alias_attribute :msh_9_id, :MSH_9_ID

end



class Hl7Obx2 < ActiveRecord::Base
  self.table_name = 'HL7_OBX_N'
  alias_attribute :pid18_patacct, :PID18_PATACCT
  alias_attribute :pid3_mrn, :PID3_MRN
  alias_attribute :pid2_DOB, :PID2_DOB
  alias_attribute :pid4_ssn, :PID4_SSN
  alias_attribute :obx_n_1, :OBX_N_1
  alias_attribute :obx_n_2, :OBX_N_2
  alias_attribute :obx_n_3, :OBX_N_3
  alias_attribute :obx_n_4, :OBX_N_4
  alias_attribute :obx_n_5, :OBX_N_5
  alias_attribute :obx_n_6, :OBX_N_6
  alias_attribute :obx_n_7, :OBX_N_7
  alias_attribute :obx_n_8, :OBX_N_8
  alias_attribute :obx_n_9, :OBX_N_9
  alias_attribute :obx_n_nbr_set, :OBX_N_NBR_SET
  alias_attribute :msh_9_id, :MSH_9_ID

end

class Hl7OrcRe2 < ActiveRecord::Base
  self.table_name = 'HL7_ORC_RE'
  alias_attribute :pid18_patacct, :PID18_PATACCT
  alias_attribute :pid3_mrn, :PID3_MRN
  alias_attribute :pid2_DOB, :PID2_DOB
  alias_attribute :pid4_ssn, :PID4_SSN
  alias_attribute :orc_1, :ORC_1
  alias_attribute :orc_2, :ORC_2
  alias_attribute :orc_3, :ORC_3
  alias_attribute :re_1, :RE_1
  alias_attribute :re_2, :RE_2
  alias_attribute :msh_9_id, :MSH_9_ID

end


class Hl7Pid2 < ActiveRecord::Base
  self.table_name = 'HL7_PID'
  alias_attribute :pid18_patacct, :PID18_PATACCT
  alias_attribute :pid3_mrn, :PID3_MRN
  alias_attribute :pid2_DOB, :PID2_DOB
  alias_attribute :pid4_ssn, :PID4_SSN
  alias_attribute :pid_1, :PID_1
  alias_attribute :pid_2, :PID_2
  alias_attribute :pid_3, :PID_3
  alias_attribute :pid_4, :PID_4
  alias_attribute :pid_5, :PID_5
  alias_attribute :pid_6, :PID_6
  alias_attribute :pid_7, :PID_7
  alias_attribute :pid_8, :PID_8
  alias_attribute :pid_9, :PID_9
  alias_attribute :pid_10, :PID_10
  alias_attribute :pid_11, :PID_11
  alias_attribute :pid_12, :PID_12
  alias_attribute :pid_13, :PID_13
  alias_attribute :pid_14, :PID_14
  alias_attribute :pid_15, :PID_15
  alias_attribute :pid_16, :PID_16
  alias_attribute :pid_17, :PID_17
  alias_attribute :pid_18, :PID_18
  alias_attribute :pid_19, :PID_19
  alias_attribute :pid_20, :PID_20
  alias_attribute :msh_9_id, :MSH_9_ID

end



class Hl7Pv12 < ActiveRecord::Base
  self.table_name = 'HL7_PV1'
  alias_attribute :pid18_patacct, :PID18_PATACCT
  alias_attribute :pid3_mrn, :PID3_MRN
  alias_attribute :pid2_DOB, :PID2_DOB
  alias_attribute :pid4_ssn, :PID4_SSN
  alias_attribute :pv1_1, :PV1_1
  alias_attribute :pv1_2, :PV1_2
  alias_attribute :pv1_3, :PV1_3
  alias_attribute :pv1_4, :PV1_4
  alias_attribute :pv1_5, :PV1_5
  alias_attribute :pv1_6, :PV1_6
  alias_attribute :pv1_7, :PV1_7
  alias_attribute :pv1_8, :PV1_8
  alias_attribute :pv1_9, :PV1_9
  alias_attribute :pv1_10, :PV1_10
  alias_attribute :pv1_11, :PV1_11
  alias_attribute :pv1_12, :PV1_12
  alias_attribute :pv1_13, :PV1_13
  alias_attribute :pv1_14, :PV1_14
  alias_attribute :pv1_15, :PV1_15
  alias_attribute :pv1_16, :PV1_16
  alias_attribute :pv1_17, :PV1_17
  alias_attribute :pv1_18, :PV1_18
  alias_attribute :pv1_19, :PV1_19
  alias_attribute :pv1_20, :PV1_20
  alias_attribute :msh_9_id, :MSH_9_ID

end

# Method to parse a single file of HL7 messages
# The method dynamically calls an inner method depending on which segment the line of text belongs to.
def parse_file(hl7_file)
  desired_text = ""
  File.open hl7_file, "rb" do |messages|
    while message = messages.gets
      msg = HL7::Message.new message.chomp # remove trailing line ending
      seg_name = msg[0].e0
      # puts msg
      # puts msg[0].e0
      if seg_name == 'MSH' then
        $msh09 = msg[0].e9
        # puts $msh09
      end
      if seg_name == 'PID' then
        $pid18 = msg[0].e18
        $pid03 = msg[0].e3
        $pid02 = msg[0].e2
        $pid04 = msg[0].e4
        # puts $msh09
        # puts $pid18
        # puts $pid03
        # puts $pid02
        # puts $pid04
      end
      #this is where the segment is passed as the method name
      send("do_something_with_#{seg_name}",msg)
      end
    end
  end

#we don't need the BHS method other than to allow it to find a method for it.
#bhs is really the file header, not the hl7 message header (that's the msh)
def do_something_with_BHS(msg)
  # puts "My " << msg[0].e0 << " looks like this: " << msg.to_s
end

#the message header will collect all of the values for that message and keep the $msh09 global variable (which holds the msh id)
def do_something_with_MSH(msg)
  # puts "My " << msg[0].e0 << " looks like this: " << msg.to_s
  # puts $msh09
  #TODO: This set could be put into a while loop (or an .each) instead of directly named.
  msh1 = msg[0].e0
  msh2 = msg[0].e2
  msh3 = msg[0].e3
  msh4 = msg[0].e4
  msh5 = msg[0].e5
  msh6 = msg[0].e6
  msh7 = msg[0].e7
  msh8 = msg[0].e8
  msh9 = msg[0].e9
  msh10 = msg[0].e10
  msh11 = msg[0].e11
  msh09 = msg[0].e09
  #send it to the database
  msh = Hl7Msh2.new
  msh.msh_1 = msh1
  msh.msh_2 = msh2
  msh.msh_3 = msh3
  msh.msh_4 = msh4
  msh.msh_5 = msh5
  msh.msh_6 = msh6
  msh.msh_7 = msh7
  msh.msh_8 = msh8
  msh.msh_9 = msh9
  msh.msh_10 = msh10
  msh.msh_11 = msh11
  msh.msh_9_id = $msh09
  msh.save
  # puts "saved!"
end

#the PID is the Patient ID segment.  For this, we need to keep and store the elements of the pid for the rest of the parts of the hl7 (eg- OBR)
def do_something_with_PID(msg)
  # puts "My " << msg[0].e0 << " looks like this: " << msg.to_s
  # puts $msh09
  # puts $pid18
  # puts $pid03
  # puts $pid02
  # puts $pid04
  pid1 = msg[0].e0
  pid2 = msg[0].e2
  pid3 = msg[0].e3
  pid4 = msg[0].e4
  pid5 = msg[0].e5
  pid6 = msg[0].e6
  pid7 = msg[0].e7
  pid8 = msg[0].e8
  pid9 = msg[0].e9
  pid10 = msg[0].e10
  pid11 = msg[0].e11
  pid12 = msg[0].e12
  pid13 = msg[0].e13
  pid14 = msg[0].e14
  pid15 = msg[0].e15
  pid16 = msg[0].e16
  pid17 = msg[0].e17
  pid18 = msg[0].e18
  pid19 = msg[0].e19
  pid20 = msg[0].e20
  #send it to the database
  pid = Hl7Pid2.new
  pid.pid18_patacct = $pid18
  pid.pid3_mrn = $pid03
  pid.pid2_DOB = $pid02
  pid.pid4_ssn = $pid04
  pid.pid_1 = pid1
  pid.pid_2 = pid2
  pid.pid_3 = pid3
  pid.pid_4 = pid4
  pid.pid_5 = pid5
  pid.pid_6 = pid6
  pid.pid_7 = pid7
  pid.pid_8 = pid8
  pid.pid_9 = pid9
  pid.pid_10 = pid10
  pid.pid_11 = pid11
  pid.pid_12 = pid12
  pid.pid_13 = pid13
  pid.pid_14 = pid14
  pid.pid_15 = pid15
  pid.pid_16 = pid16
  pid.pid_17 = pid17
  pid.pid_18 = pid18
  pid.pid_19 = pid19
  pid.pid_20 = pid20
  pid.msh_9_id = $msh09
  pid.save
  # puts "saved!"
end

# the nte must hold onto the message id and the patient id fields to maintain cardinality in the db
# as well, it has to have a sequence number because of the possible many to one records that roll up to that patient.
def do_something_with_NTE(msg)
  # puts "My " << msg[0].e0 << " looks like this: " << msg.to_s
  # puts $msh09
  # puts $pid18
  # puts $pid03
  # puts $pid02
  # puts $pid04
  $nte_nbr = msg[0].e1
  nte1 = msg[0].e0
  nte2 = msg[0].e2
  nte3 = msg[0].e3
  nte4 = msg[0].e4
  #send it to the database
  nte = Hl7Nte2.new
  nte.pid18_patacct = $pid18
  nte.pid3_mrn = $pid03
  nte.pid2_DOB = $pid02
  nte.pid4_ssn = $pid04
  nte.nte_n_1 = nte1
  nte.nte_n_2 = nte2
  nte.nte_n_3 = nte3
  nte.nte_n_4 = nte4
  nte.msh_9_id = $msh09
  nte.nte_n_nbr_set = $nte_nbr
  nte.save
  # puts "saved!"
end

# the nte must hold onto the message id and the patient id fields to maintain cardinality in the db
# as well, it has to have a sequence number because of the possible many to one records that roll up to that patient.
def do_something_with_OBX(msg)
  # puts "My " << msg[0].e0 << " looks like this: " << msg.to_s
  # puts $msh09
  # puts $pid18
  # puts $pid03
  # puts $pid02
  # puts $pid04
  $obx_nbr = msg[0].e1
  obx1 = msg[0].e0
  obx2 = msg[0].e2
  obx3 = msg[0].e3
  obx4 = msg[0].e4
  obx5 = msg[0].e5
  obx6 = msg[0].e6
  obx7 = msg[0].e7
  obx8 = msg[0].e8
  obx9 = msg[0].e9
  #send it to the database
  obx = Hl7Obx2.new
  obx.pid18_patacct = $pid18
  obx.pid3_mrn = $pid03
  obx.pid2_DOB = $pid02
  obx.pid4_ssn = $pid04
  obx.obx_n_1 = obx1
  obx.obx_n_2 = obx2
  obx.obx_n_3 = obx3
  obx.obx_n_4 = obx4
  obx.obx_n_5 = obx5
  obx.obx_n_6 = obx6
  obx.obx_n_7 = obx7
  obx.obx_n_8 = obx8
  obx.obx_n_9 = obx9
  obx.msh_9_id = $msh09
  obx.obx_n_nbr_set = $obx_nbr
  obx.save
  # puts "saved!"
end

# the nte must hold onto the message id and the patient id fields to maintain cardinality in the db
# as well, it has to have a sequence number because of the possible many to one records that roll up to that patient.
def do_something_with_OBR(msg)
  # puts "My " << msg[0].e0 << " looks like this: " << msg.to_s
  # puts $msh09
  # puts $pid18
  # puts $pid03
  # puts $pid02
  # puts $pid04
  $obr_nbr = msg[0].e1
  obr1 = msg[0].e0
  obr2 = msg[0].e2
  obr3 = msg[0].e3
  obr4 = msg[0].e4
  obr5 = msg[0].e5
  obr6 = msg[0].e6
  obr7 = msg[0].e7
  obr8 = msg[0].e8
  obr9 = msg[0].e9
  obr10 = msg[0].e10
  obr11 = msg[0].e11
  obr12 = msg[0].e12
  obr13 = msg[0].e13
  obr14 = msg[0].e14
  obr15 = msg[0].e15
  obr16 = msg[0].e16
  obr17 = msg[0].e17
  obr18 = msg[0].e18
  obr19 = msg[0].e19
  obr20 = msg[0].e20
  #send it to the database
  obr = Hl7Obr2.new
  obr.pid18_patacct = $pid18
  obr.pid3_mrn = $pid03
  obr.pid2_DOB = $pid02
  obr.pid4_ssn = $pid04
  obr.obr_n_1 = obr1
  obr.obr_n_2 = obr2
  obr.obr_n_3 = obr3
  obr.obr_n_4 = obr4
  obr.obr_n_5 = obr5
  obr.obr_n_6 = obr6
  obr.obr_n_7 = obr7
  obr.obr_n_8 = obr8
  obr.obr_n_9 = obr9
  obr.obr_n_10 = obr10
  obr.obr_n_11 = obr11
  obr.obr_n_12 = obr12
  obr.obr_n_13 = obr13
  obr.obr_n_14 = obr14
  obr.obr_n_15 = obr15
  obr.obr_n_16 = obr16
  obr.obr_n_17 = obr17
  obr.obr_n_18 = obr18
  obr.obr_n_19 = obr19
  obr.obr_n_20 = obr20
  obr.msh_9_id = $msh09
  obr.obr_n_nbr_set = $obr_nbr
  obr.save
  # puts "saved!"
end

#pv1 holds additional patient information (almost like an appendix to the PID segment)
# the pv1 must also hold onto the message id and the patient id fields to maintain cardinality in the db
def do_something_with_PV1(msg)
  # puts "My " << msg[0].e0 << " looks like this: " << msg.to_s
  # puts $msh09
  # puts $pid18
  # puts $pid03
  # puts $pid02
  # puts $pid04
  pv1_1 = msg[0].e0
  pv1_2 = msg[0].e2
  pv1_3 = msg[0].e3
  pv1_4 = msg[0].e4
  pv1_5 = msg[0].e5
  pv1_6 = msg[0].e6
  pv1_7 = msg[0].e7
  pv1_8 = msg[0].e8
  pv1_9 = msg[0].e9
  pv1_10 = msg[0].e10
  pv1_11 = msg[0].e11
  pv1_12 = msg[0].e12
  pv1_13 = msg[0].e13
  pv1_14 = msg[0].e14
  pv1_15 = msg[0].e15
  pv1_16 = msg[0].e16
  pv1_17 = msg[0].e17
  pv1_18 = msg[0].e18
  pv1_19 = msg[0].e19
  pv1_20 = msg[0].e20
  #send it to the database
  pv1 = Hl7Pv12.new
  pv1.pid18_patacct = $pid18
  pv1.pid3_mrn = $pid03
  pv1.pid2_DOB = $pid02
  pv1.pid4_ssn = $pid04
  pv1.pv1_1 = pv1_1
  pv1.pv1_2 = pv1_2
  pv1.pv1_3 = pv1_3
  pv1.pv1_4 = pv1_4
  pv1.pv1_5 = pv1_5
  pv1.pv1_6 = pv1_6
  pv1.pv1_7 = pv1_7
  pv1.pv1_8 = pv1_8
  pv1.pv1_9 = pv1_9
  pv1.pv1_10 = pv1_10
  pv1.pv1_11 = pv1_11
  pv1.pv1_12 = pv1_12
  pv1.pv1_13 = pv1_13
  pv1.pv1_14 = pv1_14
  pv1.pv1_15 = pv1_15
  pv1.pv1_16 = pv1_16
  pv1.pv1_17 = pv1_17
  pv1.pv1_18 = pv1_18
  pv1.pv1_19 = pv1_19
  pv1.pv1_20 = pv1_20
  pv1.msh_9_id = $msh09
  pv1.save
  # puts "saved!"
end

# the orc must hold onto the message id and the patient id fields to maintain cardinality in the db
def do_something_with_ORC(msg)
  # puts "My " << msg[0].e0 << " looks like this: " << msg.to_s
  # puts $msh09
  # puts $pid18
  # puts $pid03
  # puts $pid02
  # puts $pid04
  orc1 = msg[0].e0
  orc2 = msg[0].e2
  orc3 = msg[0].e3
  orc4 = msg[0].e4
  orc5 = msg[0].e5
  #send it to the database
  orc = Hl7OrcRe2.new
  orc.pid18_patacct = $pid18
  orc.pid3_mrn = $pid03
  orc.pid2_DOB = $pid02
  orc.pid4_ssn = $pid04
  orc.orc_1 = orc1
  orc.orc_2 = orc2
  orc.orc_3 = orc3
  orc.re_1 = orc4
  orc.re_2 = orc5
  orc.msh_9_id = $msh09
  orc.save
  # puts "saved!"
end

parse_file('test.hl7')
